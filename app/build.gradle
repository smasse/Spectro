apply plugin: 'com.android.application'

android {
    signingConfigs {
        release {
            storeFile file('.')
            storePassword '.'
            keyAlias = '.'
            keyPassword '.'
        }
    }
    compileSdk 31
    compileSdkVersion 31
    buildToolsVersion '31.0.0'
    defaultConfig {
        applicationId "sm.app.spectro"
        minSdk 23
        minSdkVersion 23
        targetSdk 31
        targetSdkVersion 31
        versionCode 5 //currently published versionCode is 4 as of 2019-7-11 ????
        versionName '5 2022-5-10 sdk 23-31'  //'5 - Build Date 2020-12-12 16h00'
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        signingConfig signingConfigs.release
    }
    buildTypes {
//        debug {
//        }
//        release_unsigned {
//        }
//        release {
//        signingConfig signingConfigs.release
//        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            //todo was used 2021-12-27 to work around duplicate META-INF/MANIFEST.MF in classes.jar
            //debuggable false // prod false todo does this prevent the logcat ???
        }
        debug{
            debuggable true
        }
    }
    //buildToolsVersion '30.0.3'
    compileOptions {
        sourceCompatibility '1.8'
        targetCompatibility '1.8'
    }
    productFlavors {
    }
}
repositories {
    flatDir { dirs 'libs' }
    google()
    //jcenter() //todo washere washere 2021-4-3 replace with unknown repo
    mavenCentral()
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.7.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation(name: 'sm-lib-sound-release', ext: 'aar')
    //implementation(name: 'sm-lib-sound-debug', ext: 'aar')
    //implementation files('/Users/sergemasse/sm-apps/sm-lib-acoustic/sm-lib-sound/build/outputs/aar/sm-lib-sound-debug.aar')
}
/*
 * Copyright (c) 2022 Serge Masse
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
 * and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used
 * to endorse or promote products derived from this software without specific prior written
 * permission.
 *
 * 4. This software, as well as products derived from it, must not be used for the purpose of
 * killing, harming, harassing, or capturing animals.
 *
 * 5. This software, as well as products derived from it, must be used with free dolphins, and
 * must not be used with captive dolphins kept for exploitation, such as for generating revenues
 * or for research or military purposes; the only ethical use of the app with captive dolphins
 * would be with dolphins that cannot be set free for their own safety AND are kept in a well-
 * managed sanctuary or the equivalent.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
    storePassword=...
    keyPassword=...
    keyAlias=...
    storeFile=...
*/
//allprojects {
//    afterEvaluate { project ->
//        def propsFile = rootProject.file('prop.txt')
//        def configName = 'release'
//
//        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
//            def props = new Properties()
//            props.load(new FileInputStream(propsFile))
//            android.signingConfigs[configName].storeFile = file(props['storeFile'])
//            android.signingConfigs[configName].storePassword = props['storePassword']
//            android.signingConfigs[configName].keyAlias = props['keyAlias']
//            android.signingConfigs[configName].keyPassword = props['keyPassword']
//        }
//    }
//}
allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" //<< "-Xlint:deprecation"
    }
    //todo 2022-5-10 is afterEvaluate in DC ???
    beforeEvaluate { project ->
        def propsFile = rootProject.file('prop.txt')
        def configName = 'release'
        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            def props = new Properties()
            props.load(new FileInputStream(propsFile))
            android.signingConfigs[configName].storeFile = file(props['storeFile'])
            android.signingConfigs[configName].storePassword = props['storePassword']
            android.signingConfigs[configName].keyAlias = props['keyAlias']
            android.signingConfigs[configName].keyPassword = props['keyPassword']
        }
    }
}
